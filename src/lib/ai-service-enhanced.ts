import { ContentRequest, ContentIdea } from '@/components/ContentGenerator';
import { ChannelConfig, getChannelConfigByName } from '@/types/channel-config';

// Enhanced AI Models configuration v·ªõi dual provider support
export const AI_MODELS_ENHANCED = {
  openai: {
    'gpt-4.1-2025-04-14': 'GPT-4.1 (Latest)',
    'o4-mini-2025-04-16': 'o4-mini (Fast Reasoning)',
    'gpt-4o': 'GPT-4o (Vision)',
    'gpt-4.1-mini-2025-04-14': 'GPT-4.1 Mini'
  },
  gemini: {
    'gemini-2.0-flash-exp': 'Gemini 2.0 Flash (Experimental)',
    'gemini-1.5-pro': 'Gemini 1.5 Pro',
    'gemini-1.5-flash': 'Gemini 1.5 Flash'
  }
};

export interface EnhancedAIConfig {
  researchProvider: 'gemini';
  contentProvider: 'openai';
  geminiApiKey: string;
  openaiApiKey: string;
  geminiModel: string;
  openaiModel: string;
}

interface MarketInsight {
  trending_products: string[];
  popular_keywords_related_to_shipping: string[];
  current_sales_events: Array<{
    name: string;
    country: string;
    dates: string;
  }>;
  common_pain_points_from_new_data: string[];
  market_opportunities: string[];
}

interface EnhancedContentOutput {
  content_type: string;
  channel_selected: string;
  channel_config_applied: ChannelConfig | null;
  market_insights_used: MarketInsight;
  // For Social Media Post
  title_suggestions?: string[];
  body_content?: string;
  call_to_action?: string;
  hashtags?: string[];
  suggested_visuals_notes?: string;
  tone_applied?: string;
  notes_for_user?: string;
  // For Video Script  
  video_title_idea?: string;
  video_duration_seconds?: number;
  target_audience_focus?: string;
  tone_of_voice_script?: string;
  script_scenes?: Array<{
    scene_id: string;
    duration_seconds: number;
    visual_description: string;
    audio_description: string;
    voice_over_vietnamese: string;
    text_overlay: string;
    final_visual_overlay?: string;
  }>;
  call_to_action_script?: string;
  suggested_hashtags?: string[];
  // For Blog Post
  title?: string;
  outline?: {
    introduction: string;
    [key: string]: string;
  };
  full_content_draft?: string;
  keywords_for_seo?: string[];
  meta_description?: string;
}

export class EnhancedAIService {
  private config: EnhancedAIConfig | null = null;

  setConfig(config: EnhancedAIConfig) {
    this.config = config;
  }

  async generateContentIdeasWithInsights(
    request: ContentRequest, 
    onProgress?: (stage: string) => void
  ): Promise<ContentIdea[]> {
    if (!this.config?.geminiApiKey || !this.config?.openaiApiKey) {
      throw new Error('Vui l√≤ng c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß API keys cho c·∫£ Gemini v√† OpenAI trong ph·∫ßn Settings');
    }

    // Step 1: Gemini nghi√™n c·ª©u th·ªã tr∆∞·ªùng
    onProgress?.('üîç Gemini ƒëang nghi√™n c·ª©u xu h∆∞·ªõng th·ªã tr∆∞·ªùng...');
    const marketInsights = await this.getMarketInsightsFromGemini(request);
    
    // Step 2: OpenAI s√°ng t·∫°o √Ω t∆∞·ªüng d·ª±a tr√™n insights + channel config
    onProgress?.('üí° OpenAI ƒëang t·∫°o √Ω t∆∞·ªüng d·ª±a tr√™n insights...');
    const channelConfig = getChannelConfigByName(request.channel);
    const ideas = await this.generateIdeasWithOpenAI(request, marketInsights, channelConfig);
    
    onProgress?.('‚úÖ Ho√†n t·∫•t ph√¢n t√≠ch v√† t·∫°o √Ω t∆∞·ªüng!');
    return ideas;
  }

  async generateEnhancedDetailedContent(
    idea: ContentIdea, 
    request: ContentRequest,
    onProgress?: (stage: string) => void
  ): Promise<EnhancedContentOutput> {
    if (!this.config?.geminiApiKey || !this.config?.openaiApiKey) {
      throw new Error('Vui l√≤ng c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß API keys cho c·∫£ Gemini v√† OpenAI');
    }

    // Step 1: Gemini c·∫≠p nh·∫≠t insights m·ªõi nh·∫•t cho idea c·ª• th·ªÉ
    onProgress?.('üéØ Gemini ƒëang nghi√™n c·ª©u insights cho √Ω t∆∞·ªüng c·ª• th·ªÉ...');
    const specificInsights = await this.getSpecificInsightsFromGemini(idea, request);
    
    // Step 2: OpenAI t·∫°o n·ªôi dung v·ªõi format chu·∫©n
    onProgress?.('‚úçÔ∏è OpenAI ƒëang t·∫°o n·ªôi dung theo chu·∫©n chuy√™n gia...');
    const channelConfig = getChannelConfigByName(request.channel);
    const enhancedContent = await this.createEnhancedContentWithOpenAI(idea, request, specificInsights, channelConfig);
    
    onProgress?.('üé® ƒêang t·ªëi ∆∞u n·ªôi dung theo c·∫•u h√¨nh k√™nh...');
    return enhancedContent;
  }

  async generateBulkEnhancedContent(ideas: ContentIdea[], request: ContentRequest): Promise<{ [key: string]: EnhancedContentOutput }> {
    if (!this.config?.geminiApiKey || !this.config?.openaiApiKey) {
      throw new Error('Vui l√≤ng c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß API keys');
    }

    const results: { [key: string]: EnhancedContentOutput } = {};
    
    // Ch·∫°y song song ƒë·ªÉ t·ªëi ∆∞u performance
    const promises = ideas.map(async (idea) => {
      try {
        const content = await this.generateEnhancedDetailedContent(idea, request);
        return { ideaId: idea.id, content };
      } catch (error) {
        console.error(`Error generating content for idea ${idea.id}:`, error);
        return null;
      }
    });

    const resolvedPromises = await Promise.all(promises);
    
    resolvedPromises.forEach((result) => {
      if (result) {
        results[result.ideaId] = result.content;
      }
    });

    return results;
  }

  private async getMarketInsightsFromGemini(request: ContentRequest): Promise<MarketInsight> {
    const prompt = `
B·∫°n l√† Nh√† Nghi√™n c·ª©u Th·ªã tr∆∞·ªùng v√† T·ªïng h·ª£p D·ªØ li·ªáu Th√¥ng minh cho Tiximax (d·ªãch v·ª• mua h·ªô & v·∫≠n chuy·ªÉn qu·ªëc t·∫ø).

D·ª±a tr√™n y√™u c·∫ßu n·ªôi dung n√†y:
- K√™nh: ${request.channel}
- ƒê·ªãnh d·∫°ng: ${request.format}
- T·ª´ kh√≥a: ${request.keywords.join(', ')}
- M·ª•c ti√™u: ${request.objective}

H√£y nghi√™n c·ª©u v√† cung c·∫•p insights th·ªã tr∆∞·ªùng m·ªõi nh·∫•t d∆∞·ªõi d·∫°ng JSON:

{
  "trending_products": ["S·∫£n ph·∫©m hot hi·ªán t·∫°i t·ª´ Nh·∫≠t/H√†n/M·ªπ/Indo m√† kh√°ch VN quan t√¢m"],
  "popular_keywords_related_to_shipping": ["T·ª´ kh√≥a t√¨m ki·∫øm ph·ªï bi·∫øn v·ªÅ logistics qu·ªëc t·∫ø"],
  "current_sales_events": [{"name": "T√™n event", "country": "Qu·ªëc gia", "dates": "Th·ªùi gian"}],
  "common_pain_points_from_new_data": ["Pain points g·∫ßn ƒë√¢y t·ª´ customer feedback"],
  "market_opportunities": ["C∆° h·ªôi th·ªã tr∆∞·ªùng m·ªõi ph√°t hi·ªán"]
}

Focus v√†o xu h∆∞·ªõng mua s·∫Øm qu·ªëc t·∫ø, v·∫•n ƒë·ªÅ logistics, v√† opportunity cho Tiximax.
`;

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${this.config!.geminiModel}:generateContent?key=${this.config!.geminiApiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: { temperature: 0.3, maxOutputTokens: 1500 }
        }),
      });

      const data = await response.json();
      const content = data.candidates[0].content.parts[0].text;
      
      // Parse JSON response
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
    } catch (error) {
      console.error('Gemini API Error:', error);
    }
    
    // Fallback insights
    return {
      trending_products: ['K-beauty skincare', 'Gaming gear t·ª´ Nh·∫≠t', 'Fashion H√†n Qu·ªëc'],
      popular_keywords_related_to_shipping: ['ship h√†ng nhanh', 'ph√≠ ship r·∫ª', 'mua h·ªô uy t√≠n'],
      current_sales_events: [{ name: 'Black Friday', country: 'US', dates: 'November 2024' }],
      common_pain_points_from_new_data: ['Ph√≠ ph√°t sinh kh√¥ng r√µ r√†ng', 'Th·ªùi gian giao h√†ng l√¢u'],
      market_opportunities: ['TƒÉng nhu c·∫ßu mua h√†ng H√†n Qu·ªëc', 'Gaming market expansion']
    };
  }

  private async getSpecificInsightsFromGemini(idea: ContentIdea, request: ContentRequest): Promise<MarketInsight> {
    const prompt = `
Nghi√™n c·ª©u s√¢u h∆°n cho √Ω t∆∞·ªüng n·ªôi dung c·ª• th·ªÉ: "${idea.title}"

Target segment: ${idea.targetSegment}
Core content: ${idea.coreContent}
Insight ƒëang khai th√°c: ${idea.insight}

Cung c·∫•p insights b·ªï sung d∆∞·ªõi d·∫°ng JSON:
{
  "trending_products": ["S·∫£n ph·∫©m c·ª• th·ªÉ li√™n quan ƒë·∫øn √Ω t∆∞·ªüng n√†y"],
  "popular_keywords_related_to_shipping": ["Keywords ph√π h·ª£p v·ªõi target segment"],
  "current_sales_events": [{"name": "Event ph√π h·ª£p", "country": "Qu·ªëc gia", "dates": "Timing"}],
  "common_pain_points_from_new_data": ["Pain points c·ª• th·ªÉ cho segment n√†y"],
  "market_opportunities": ["Opportunity c·ª• th·ªÉ t·ª´ √Ω t∆∞·ªüng n√†y"]
}
`;

    try {
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${this.config!.geminiModel}:generateContent?key=${this.config!.geminiApiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: { temperature: 0.3, maxOutputTokens: 1000 }
        }),
      });

      const data = await response.json();
      const content = data.candidates[0].content.parts[0].text;
      
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
    } catch (error) {
      console.error('Gemini specific insights error:', error);
    }

    return await this.getMarketInsightsFromGemini(request);
  }

  private async generateIdeasWithOpenAI(request: ContentRequest, insights: MarketInsight, channelConfig: ChannelConfig | null): Promise<ContentIdea[]> {
    const channelConfigText = channelConfig ? JSON.stringify(channelConfig, null, 2) : 'Kh√¥ng c√≥ c·∫•u h√¨nh k√™nh c·ª• th·ªÉ';
    
    const prompt = `
B·∫°n l√† Chuy√™n gia Content Marketing 20 nƒÉm kinh nghi·ªám cho Tiximax.

**KI·∫æN TH·ª®C N·ªÄN T·∫¢NG TIXIMAX:**
- USP: D·ªãch v·ª• mua h·ªô v√† v·∫≠n chuy·ªÉn qu·ªëc t·∫ø t·ª´ Indonesia, Nh·∫≠t, H√†n, M·ªπ v·ªÅ Vi·ªát Nam
- ƒê√°ng tin c·∫≠y, minh b·∫°ch, chuy√™n nghi·ªáp
- H·ªó tr·ª£ c·∫£ c√° nh√¢n v√† SME/ch·ªß shop

**INSIGHTS TH·ªä TR∆Ø·ªúNG M·ªöI NH·∫§T:**
${JSON.stringify(insights, null, 2)}

**C·∫§U H√åNH K√äNH:**
${channelConfigText}

**Y√äU C·∫¶U N·ªòI DUNG:**
- M·ª•c ti√™u: ${request.objective}
- Giai ƒëo·∫°n: ${request.stage}
- K√™nh: ${request.channel}
- ƒê·ªãnh d·∫°ng: ${request.format}
- T·ª´ kh√≥a: ${request.keywords.join(', ')}

√Åp d·ª•ng quy tr√¨nh 15 b∆∞·ªõc Content Marketing v√† c·∫•u h√¨nh k√™nh ƒë·ªÉ t·∫°o 4-5 √Ω t∆∞·ªüng n·ªôi dung.

Tr·∫£ v·ªÅ JSON array:
[{
  "id": "1",
  "title": "Ti√™u ƒë·ªÅ h·∫•p d·∫´n",
  "objective": "M·ª•c ti√™u r√µ r√†ng",
  "targetSegment": "Segment c·ª• th·ªÉ",
  "coreContent": "N·ªôi dung c·ªët l√µi ph√π h·ª£p k√™nh",
  "insight": "Insight ƒë∆∞·ª£c khai th√°c",
  "cta": "CTA ph√π h·ª£p k√™nh",
  "channelFormat": "Channel + format"
}]
`;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.config!.openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: this.config!.openaiModel,
        messages: [
          { role: 'system', content: 'B·∫°n l√† Chuy√™n gia Content Marketing cho Tiximax v·ªõi 20 nƒÉm kinh nghi·ªám.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 2500
      }),
    });

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    try {
      const jsonMatch = content.match(/\[[\s\S]*\]/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0]);
      }
    } catch (error) {
      console.error('Failed to parse OpenAI ideas response:', error);
    }
    
    // Fallback ideas
    return [
      {
        id: '1',
        title: 'B√≠ M·∫≠t Order H√†ng Qu·ªëc T·∫ø Kh√¥ng H·ªÅ Kh√≥',
        objective: request.objective,
        targetSegment: 'Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu order h√†ng qu·ªëc t·∫ø',
        coreContent: 'Video h∆∞·ªõng d·∫´n step-by-step order h√†ng v·ªõi Tiximax',
        insight: 'N·ªói lo v·ªÅ ƒë·ªô ph·ª©c t·∫°p v√† r·ªßi ro khi order h√†ng qu·ªëc t·∫ø',
        cta: 'Inbox ngay ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ order ƒë·∫ßu ti√™n',
        channelFormat: request.channel
      }
    ];
  }

  private async createEnhancedContentWithOpenAI(
    idea: ContentIdea, 
    request: ContentRequest, 
    insights: MarketInsight, 
    channelConfig: ChannelConfig | null
  ): Promise<EnhancedContentOutput> {
    const isVideo = request.format.toLowerCase().includes('video') || 
                   request.channel.toLowerCase().includes('tiktok') ||
                   request.channel.toLowerCase().includes('youtube');
    
    const isBlog = request.format.toLowerCase().includes('blog') || 
                  request.channel.toLowerCase().includes('website');

    const channelConfigText = channelConfig ? JSON.stringify(channelConfig, null, 2) : 'Kh√¥ng c√≥ c·∫•u h√¨nh k√™nh c·ª• th·ªÉ';
    
    let prompt = '';
    
    if (isVideo) {
      prompt = `
B·∫°n l√† CHUY√äN GIA CONTENT MARKETING 20 NƒÇM KINH NGHI·ªÜM, chuy√™n t·∫°o k·ªãch b·∫£n video viral.

**√ùT T∆Ø·ªûNG ƒê√É CH·ªåN:**
${JSON.stringify(idea, null, 2)}

**INSIGHTS TH·ªä TR∆Ø·ªúNG:**
${JSON.stringify(insights, null, 2)}

**C·∫§U H√åNH K√äNH:**
${channelConfigText}

**Y√äU C·∫¶U:**
- T·ª´ kh√≥a: ${request.keywords.join(', ')}
- Tone: ${request.tone.join(', ')}
- CTA: ${request.cta || idea.cta}

VI·∫æT K·ªäCH B·∫¢N VIDEO theo format JSON:
{
  "content_type": "Video Script",
  "channel_selected": "${request.channel}",
  "video_title_idea": "Ti√™u ƒë·ªÅ video viral",
  "video_duration_seconds": ${channelConfig?.key_characteristics.content_length_guideline.includes('8') ? 8 : 15},
  "target_audience_focus": "${idea.targetSegment}",
  "tone_of_voice_script": "Tone ph√π h·ª£p k√™nh",
  "script_scenes": [
    {
      "scene_id": "SCENE_1",
      "duration_seconds": 2,
      "visual_description": "M√¥ t·∫£ visual chi ti·∫øt",
      "audio_description": "Nh·∫°c n·ªÅn v√† hi·ªáu ·ª©ng",
      "voice_over_vietnamese": "L·ªùi tho·∫°i Vi·ªát",
      "text_overlay": "Text hi·ªÉn th·ªã tr√™n m√†n h√¨nh"
    }
  ],
  "call_to_action_script": "CTA m·∫°nh m·∫Ω",
  "suggested_hashtags": ["#Tiximax", "#Trending"],
  "notes_for_user": "L∆∞u √Ω khi quay"
}
`;
    } else if (isBlog) {
      const isExpertSEO = request.length === 'seo-expert' || request.format.includes('2000+');
      
      if (isExpertSEO) {
        prompt = `
B·∫°n l√† CHUY√äN GIA SEO TOP GOOGLE H√ÄNG ƒê·∫¶U v·ªõi 20 NƒÇM KINH NGHI·ªÜM.

**Y√äU C·∫¶U VI·∫æT BLOG 2000+ T·ª™:**
${JSON.stringify(idea, null, 2)}

**INSIGHTS TH·ªä TR∆Ø·ªúNG:**
${JSON.stringify(insights, null, 2)}

**C·∫§U H√åNH K√äNH:**
${channelConfigText}

VI·∫æT B√ÄI BLOG CHU·∫®N SEO EXPERT theo format JSON:
{
  "content_type": "Blog Post SEO Expert",
  "channel_selected": "${request.channel}",
  "title": "Ti√™u ƒë·ªÅ SEO-optimized",
  "meta_description": "Meta description 150-160 k√Ω t·ª±",
  "outline": {
    "introduction": "M·ªü b√†i hook",
    "section_1": "Ph·∫ßn 1...",
    "conclusion": "K·∫øt lu·∫≠n"
  },
  "full_content_draft": "B√ÄI BLOG ƒê·∫¶Y ƒê·ª¶ 2000+ T·ª™ v·ªõi:\n\n# Ti√™u ƒë·ªÅ SEO\n\n## M·ªü b√†i (200 t·ª´)...\n\n## N·ªôi dung ch√≠nh...\n\n## K·∫øt lu·∫≠n v√† CTA",
  "keywords_for_seo": ["primary keyword", "secondary keywords"],
  "call_to_action": "CTA m·∫°nh m·∫Ω",
  "notes_for_user": "SEO tips"
}

B√ÄI VI·∫æT PH·∫¢I ƒê·∫†T CHU·∫®N SEO EXPERT LEVEL V·ªöI T·ªêI THI·ªÇU 2000 T·ª™!
`;
      } else {
        prompt = `
B·∫°n l√† CHUY√äN GIA CONTENT MARKETING vi·∫øt blog chuy√™n nghi·ªáp.

**√ùT T∆Ø·ªûNG:**
${JSON.stringify(idea, null, 2)}

**INSIGHTS:**
${JSON.stringify(insights, null, 2)}

VI·∫æT B√ÄI BLOG theo format JSON:
{
  "content_type": "Blog Post",
  "channel_selected": "${request.channel}",
  "title": "Ti√™u ƒë·ªÅ blog",
  "full_content_draft": "B√†i blog ƒë·∫ßy ƒë·ªß v·ªõi c·∫•u tr√∫c chuy√™n nghi·ªáp",
  "keywords_for_seo": ["keywords"],
  "call_to_action": "CTA"
}
`;
      }
    } else {
      // Social Media Post
      prompt = `
B·∫°n l√† CHUY√äN GIA CONTENT MARKETING cho Social Media.

**√ùT T∆Ø·ªûNG:**
${JSON.stringify(idea, null, 2)}

**INSIGHTS:**
${JSON.stringify(insights, null, 2)}

**C·∫§U H√åNH K√äNH:**
${channelConfigText}

VI·∫æT B√ÄI POST theo format JSON:
{
  "content_type": "Social Media Post",
  "channel_selected": "${request.channel}",
  "title_suggestions": ["Ti√™u ƒë·ªÅ 1", "Ti√™u ƒë·ªÅ 2"],
  "body_content": "N·ªôi dung b√†i post ƒë·∫ßy ƒë·ªß",
  "call_to_action": "CTA ph√π h·ª£p k√™nh",
  "hashtags": ["#Tiximax", "#Trending"],
  "suggested_visuals_notes": "G·ª£i √Ω h√¨nh ·∫£nh",
  "tone_applied": "Tone ƒë√£ √°p d·ª•ng",
  "notes_for_user": "L∆∞u √Ω ƒëƒÉng b√†i"
}
`;
    }

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${this.config!.openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: this.config!.openaiModel,
        messages: [
          { role: 'system', content: 'B·∫°n l√† Chuy√™n gia Content Marketing h√†ng ƒë·∫ßu cho Tiximax.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: isVideo ? 3000 : (isBlog && request.length === 'seo-expert' ? 6000 : 4000)
      }),
    });

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    try {
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const parsed = JSON.parse(jsonMatch[0]);
        return {
          ...parsed,
          channel_config_applied: channelConfig,
          market_insights_used: insights
        };
      }
    } catch (error) {
      console.error('Failed to parse enhanced content response:', error);
    }
    
    // Fallback response
    return {
      content_type: 'Social Media Post',
      channel_selected: request.channel,
      channel_config_applied: channelConfig,
      market_insights_used: insights,
      body_content: `N·ªôi dung ƒë∆∞·ª£c t·∫°o cho: ${idea.title}\n\n${idea.coreContent}`,
      call_to_action: idea.cta,
      tone_applied: request.tone.join(', ')
    };
  }
}

export const enhancedAIService = new EnhancedAIService();